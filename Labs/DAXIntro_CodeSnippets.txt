** This file contains code snippets for the Introduction to Data Analysis Expressions labs **

***************************
***************************
** Lab 1: What is DAX?

---------------------------------------------------------------------
>>Exercise 1: Create calculated columns
---------------------------------------------------------------------

LineTotal = Sales[OrderQuantity] * Sales[UnitPrice]


FullName = Customer[FirstName] & " " & Customer[LastName]


Initials = LEFT( [FirstName], 1 ) & LEFT( [LastName], 1 )


Approximate Age = QUOTIENT( INT( NOW() - Customer[BirthDate] ), 365.25 )


Exact Age = 
    /*
    This column computes the customer's age by subtracting their birth year from the current year and then subtracting 1 if their birthday hasn't happened yet.
    */
    VAR ThisYear = YEAR( TODAY() ) // The current year
    VAR BirthYear = YEAR( Customer[BirthDate] ) // Customer birth year
    VAR ThisYearBirthday = DATE( ThisYear, MONTH( Customer[BirthDate] ), DAY( Customer[BirthDate] ) ) // Customer's birthday this year
    VAR BDayHasHappened = IF( ThisYearBirthday <= TODAY(), 0, 1 ) // Return 0 if birthday is on or before today, 1 if it's after
RETURN ( ThisYear - BirthYear ) - BDayHasHappened // This year - birth year. If birthday is after today, subtract 1.


---------------------------------------------------------------------
>>Exercise 2: Create calculated measures
---------------------------------------------------------------------

Total Sales = SUM( Sales[SalesAmount] )


Profit = 
  SUM( Sales[SalesAmount] ) - SUM( Sales[TotalProductCost] )


---------------------------------------------------------------------
>>Exercise 3: Create calculated tables
---------------------------------------------------------------------

Latest Promotions = 
    VAR MostRecentYear =  YEAR( MAX( Promotion[StartDate] ) )
RETURN FILTER( Promotion, Promotion[StartDate] >= DATE( MostRecentYear,1,1 ) )


---------------------------------------------------------------------
>>Exercise 4: Test your calculations
---------------------------------------------------------------------

AgeTest = Customer[Approximate Age] = Customer[Exact Age]


***************************
***************************
**Lab 2: Performing Basic Calculations

---------------------------------------------------------------------
>>Exercise 1: Work with mathematical operations
---------------------------------------------------------------------

WeightInLbs = 
    VAR Multiplier = SWITCH( 'Product'[WeightUnitMeasureCode], "G", ( 1/453.592 ), "LB", 1, BLANK() )
RETURN 'Product'[Weight] * Multiplier


---------------------------------------------------------------------
>>Exercise 2: Working with text calculations
---------------------------------------------------------------------

Qualified City = UPPER( [City] & ", " & [StateProvinceName] & ", " & [CountryRegionName] )


Formatted Label = 
    "Category: " & 'Product'[Category] & UNICHAR( 10 ) 
    & "Subcategory: " & 'Product'[Subcategory] & UNICHAR( 10 ) 
    & "Product: " & 'Product'[Product]


---------------------------------------------------------------------
>>Exercise 3: Working with dates and times
---------------------------------------------------------------------

Days to Ship = INT( Sales[ShipDate] - Sales[OrderDate] )


Years as Customer = YEAR( TODAY() ) - YEAR( Customer[DateFirstPurchase] )


---------------------------------------------------------------------
>>Exercise 4: Working with logic
---------------------------------------------------------------------

Married or Single = IF( Customer[MaritalStatus] = "M", "Married", "Single" )


Car Ownership = IF( Customer[NumberCarsOwned] > 0, "Has a car", "Does not have a car" )


Customer Category = 
    VAR MoreThan8Years = Customer[Years as Customer] > 8 // Logical value, true if > 8 else false
    VAR AnnualIncomeAbove70000 = Customer[YearlyIncome] > 70000 // Logical value, true if > 70K else false
    VAR MoreThan3Sales = COUNTROWS( RELATEDTABLE( Sales ) ) > 3 // Logical value, true if > 3 sales
RETURN IF( MoreThan8Years && AnnualIncomeAbove70000 && MoreThan3Sales, "Premium", "Standard" ) // If all three conditions are true, Premium, else Standard


CountryCode = 
    SWITCH( SalesTerritory[SalesTerritoryKey],
    1, "US",
    2, "US",
    3, "US",
    4, "US",
    5, "US",
    6, "CA",
    7, "FR",
    8, "DE",
    9, "AU",
    10, "UK",
    "NA" )


Age Group = 
    SWITCH( TRUE(),
        Customer[Exact Age] <= 18, "18 & Under",
        Customer[Exact Age] <= 35, "19-35",
        Customer[Exact Age] <= 45, "36-45",
        Customer[Exact Age] <= 60, "46-60",
        Customer[Exact Age] <= 78, "61-78",
        Customer[Exact Age] <= 90, "79-90",
        "91 & Over" )


***************************
***************************
**Lab 3: Working with context in the data model

---------------------------------------------------------------------
>>Exercise 1: Creating a data model with a star schema
---------------------------------------------------------------------

SalespersonID = RELATED( Orders[SalespersonID] )


OrderDate = RELATED( Orders[OrderDate] )


UnitPrice = RELATED( 'Product'[ListPrice] )


UnitCost = RELATED( 'Product'[Cost] )


SaleTotal = Sales[OrderQuantity] * Sales[UnitPrice]


TotalCost = Sales[OrderQuantity] * Sales[UnitCost]


Profit = SUM( Sales[SaleTotal] ) - SUM( Sales[TotalCost] )


---------------------------------------------------------------------
>>Exercise 2: Enhance the data model with measures
---------------------------------------------------------------------

% of Total Profit = DIVIDE( [Profit], CALCULATE( [Profit], ALL( Sales ) ) )


August September Profit Delta = 
    VAR AugustProfit = CALCULATE( [Profit], MONTH( Sales[OrderDate] ) = 8 )
    VAR SeptemberProfit = CALCULATE( [Profit], MONTH( Sales[OrderDate] ) = 9 )
RETURN SeptemberProfit - AugustProfit


***************************
***************************
**Lab 4: Performing more advanced calculations

---------------------------------------------------------------------
>>Exercise 1: Work with errors in data
---------------------------------------------------------------------

LineTotal = DataWithErrors[Quantity] * DataWithErrors[Unit Price]


ISERROR = ISERROR( VALUE( DataWithErrors[Unit Price] ) )


LineTotal = DataWithErrors[Quantity] * IFERROR( VALUE( DataWithErrors[Unit Price] ), 0 )


CleanedUnitPrice = 
    // Value to clean
    VAR TextToClean = DataWithErrors[Unit Price]
    // Single-column table of values, 1 to length of value to clean
    VAR __t1 = GENERATESERIES( 1, LEN( TextToClean ) ) 
    // Add a column called [Letter], with each row containing the character at that index
    VAR __t2 = ADDCOLUMNS( __t1, "Letter", MID(TextToClean, [Value] ,1 ) ) 
    // Add a column called [IsNumber] with TRUE if character is 0-9, else FALSE
    VAR __t3 = ADDCOLUMNS( __t2, "IsNumber", [Letter] >= "0" && [Letter] <= "9" ) 
    // Filter for only numbers and decimal point and concatenate into a string
    VAR Result = CONCATENATEX( FILTER( __t3, [IsNumber] || [Letter] = "." ), [Letter] ) 
RETURN VALUE( Result ) // Return the concatenated text as a numeric value


---------------------------------------------------------------------
>>Exercise 2: Using iterator functions
---------------------------------------------------------------------

Total Sales X = 
    SUMX( Sales, Sales[OrderQuantity] * Sales[UnitPrice] )


Earliest Purchase Date = MINX( RELATEDTABLE( Sales ), Sales[OrderDate] )


---------------------------------------------------------------------
>>Exercise 3: Using table manipulation functions
---------------------------------------------------------------------

State/Province Country = 
    VAR SPCCols = SELECTCOLUMNS( Geography, 
        "State/Province", Geography[StateProvinceName],
        "Country", Geography[CountryRegionName] )
    VAR UniqueRows = DISTINCT( SPCCols )
RETURN UniqueRows


Top 10 Products by Profit = 
    VAR SummarizedProduct = SUMMARIZE( 'Product', 'Product'[Product], 
        "Total Product Sales", Sales[Total Sales], 
        "Total Product Profit", Sales[Profit] )
    VAR Top10 = TOPN( 10, SummarizedProduct, [Total Product Profit] )
RETURN Top10


Product With Highest List Price = 
    MINX( 
        TOPN( 1, 'Product', 'Product'[ListPrice] ), 
        'Product'[Product] 
        )


---------------------------------------------------------------------
>>Exercise 4: Get started with DAX Studio
---------------------------------------------------------------------

(no code for this exercise)

***************************
***************************
**Lab 5: Working with time

---------------------------------------------------------------------
>>Exercise 1: Performing date calculations
---------------------------------------------------------------------

OpenForBusiness = 
    VAR IsSunday = WEEKDAY( 'Date'[FullDate], 2 ) = 7
    VAR IsHoliday = CONTAINS( Holidays, Holidays[Date], 'Date'[FullDate] )
RETURN IF( IsSunday || IsHoliday, 0, 1 )


Daily Sales Average = 
    VAR TotalSales = SUM( Sales[SalesAmount] )
    VAR OperatingDaysInPeriod = SUM( 'Date'[OpenForBusiness] )
RETURN DIVIDE( TotalSales, OperatingDaysInPeriod )


Week Of = 
    VAR MondayOfWeek = 'Date'[FullDate] - WEEKDAY( 'Date'[FullDate], 3 )
    VAR FormattedMonday = FORMAT( MondayOfWeek, "dddd, mmmm dd, yyyy" )
RETURN "Week of " & FormattedMonday


MondayOfWeek = 
    'Date'[FullDate] - WEEKDAY( 'Date'[FullDate], 3 )


---------------------------------------------------------------------
>>Exercise 2: Working with date tables
---------------------------------------------------------------------

Profit by Order Date = 
    CALCULATE( [Profit], 
        USERELATIONSHIP( Sales[OrderDateKey], 'Date'[DateKey] )
    )


Profit by Ship Date = 
    CALCULATE( [Profit], 
        USERELATIONSHIP( Sales[ShipDateKey], 'Date'[DateKey] )
    )


Profit by Due Date = 
    CALCULATE( [Profit], 
        USERELATIONSHIP( Sales[DueDateKey], 'Date'[DateKey] )
    )


---------------------------------------------------------------------
>>Exercise 3: Working with to-date calculations
---------------------------------------------------------------------

YTD Sales = 
    TOTALYTD( [Total Sales], 'Date'[FullDate] )


Custom YTD Sales =
    CALCULATE( [Total Sales], DATESYTD( 'Date'[FullDate] ) )


---------------------------------------------------------------------
>>Exercise 4: Finding year-over-year change
---------------------------------------------------------------------

Sales YoY Change % = 
    VAR PrevYearSales = CALCULATE( [Total Sales], 
        DATEADD( 'Date'[FullDate], -1, YEAR ) )
    VAR SalesDiff = [Total Sales] – PrevYearSales
RETURN DIVIDE( SalesDiff, PrevYearSales )


---------------------------------------------------------------------
>>Exercise 5: Finding moving averages
---------------------------------------------------------------------

Sales 30 Day Moving Average = 
    VAR NumberOfDaysToAverage = 30
    VAR MaxDateCurrentSlice = MAX( 'Date'[FullDate] )
    VAR MaxDateOffset = MaxDateCurrentSlice - NumberOfDaysToAverage
    VAR TotalSalesInRange = CALCULATE( [Total Sales],
        DATESBETWEEN( 'Date'[FullDate], MaxDateOffset, MaxDateCurrentSlice ) )
    VAR AvgSales = DIVIDE( TotalSalesInRange, NumberOfDaysToAverage )
RETURN AvgSales


Sales 90 Day Moving Average = 
    VAR NumberOfDaysToAverage = 90
    VAR MaxDateCurrentSlice = MAX( 'Date'[FullDate] )
    VAR MaxDateOffset = MaxDateCurrentSlice - NumberOfDaysToAverage
    VAR TotalSalesInRange = CALCULATE( [Total Sales],
        DATESBETWEEN( 'Date'[FullDate], MaxDateOffset, MaxDateCurrentSlice ) )
    VAR AvgSales = DIVIDE( TotalSalesInRange, NumberOfDaysToAverage )
RETURN AvgSales


***************************
***************************
**Lab 6: Enhancing the user experience

---------------------------------------------------------------------
>>Exercise 1: Controlling visibility of your measures
---------------------------------------------------------------------

Sales YoY Change % = 
    VAR PrevYearSales = CALCULATE( [Total Sales], 
        DATEADD( 'Date'[FullDate], -1, YEAR ) )
    VAR SalesDiff = [Total Sales] - PrevYearSales
    VAR YoYChange = DIVIDE( SalesDiff, PrevYearSales )
    VAR NotTooHigh = YoYChange <= 5 // Should never exceed 500%
    VAR SalesPresent = NOT( ISBLANK( [Total Sales] ) )
RETURN IF( NotTooHigh && SalesPresent, YoYChange, BLANK() )


Sales % of Parent = 
    VAR AllSales = CALCULATE( [Total Sales], 
        ALL( 'Product' ) )
    VAR CategorySales = CALCULATE( [Total Sales], 
        ALLEXCEPT( 'Product', 'Product'[Category] ) )
    VAR SubcategorySales = CALCULATE( [Total Sales], 
        ALLEXCEPT( 'Product', 'Product'[Category],
        'Product'[Subcategory] ) )
    VAR ModelSales = CALCULATE( [Total Sales], 
        ALLEXCEPT( 'Product', 'Product'[Category],
        'Product'[Subcategory], 'Product'[Model] ) )
    VAR ParentSales = SWITCH( TRUE(),
        ISINSCOPE( 'Product'[Product] ), ModelSales,
        ISINSCOPE( 'Product'[Model] ), SubcategorySales,
        ISINSCOPE( 'Product'[Subcategory] ), CategorySales,
        ISINSCOPE( 'Product'[Category] ), AllSales,
        AllSales )
RETURN DIVIDE( [Total Sales], ParentSales )



---------------------------------------------------------------------
>>Exercise 2: Using What-if parameters
---------------------------------------------------------------------

KPI Sales Goal = [PY Sales] * ( 1 + [KPI Target Increase Value] )

Sales param moving average = 
    VAR NumberOfDaysToAverage = [Average Over Days Value]
    VAR MaxDateCurrentSlice = MAX( 'Date'[FullDate] )
    VAR MaxDateOffset = MaxDateCurrentSlice -NumberOfDaysToAverage
    VAR TotalSalesInRange = CALCULATE( [Total Sales],
        DATESBETWEEN( 'Date'[FullDate], MaxDateOffset, MaxDateCurrentSlice ) )
    VAR AvgSales = DIVIDE( TotalSalesInRange, NumberOfDaysToAverage )
RETURN IF( ISBLANK( [Total Sales] ), BLANK(), AvgSales )

KPI Indicator = 
    SWITCH( TRUE(),
        Sales[Sales YoY Change %] >= [YoY Target Value], "CircleHigh",
        Sales[Sales YoY Change %] >= [YoY Warning Value], "SignMedium",
        "SignLow" )

---------------------------------------------------------------------
>>Exercise 3: Adding banding
---------------------------------------------------------------------

Price Band = 
    VAR LowerBoundRow = TOPN( 1, 
        FILTER( PriceBands, PriceBands[LowerBound] <= 'Product'[ListPrice] ),
        PriceBands[LowerBound], DESC )
    VAR BandName = MINX( LowerBoundRow, PriceBands[BandName] )
RETURN BandName

---------------------------------------------------------------------
>>Exercise 4: Using DAX to provide row-level security
---------------------------------------------------------------------

[SalesPerson] = USERNAME()
